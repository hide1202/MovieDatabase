apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

apply from: '../dependencies.gradle'
apply from: '../external.gradle'

android {
    compileSdkVersion versions.android.compileSdk

    defaultConfig {
        applicationId "io.viewpoint.moviedatabase"
        minSdkVersion versions.android.minSdk
        targetSdkVersion versions.android.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            buildConfigField("String", "API_KEY", "\"${external.apiKey}\"")
        }
        release {
            buildConfigField("String", "API_KEY", "\"${external.apiKey}\"")

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray()
        }
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

kapt {
    correctErrorTypes true // for hilt
}

dependencies {
    implementation project(':model')
    implementation project(':api')
    implementation project(':domain')

    implementation deps.kotlin.stdlib

    // androidx
    implementation deps.androidx.core
    implementation deps.androidx.activity
    implementation deps.androidx.fragment
    implementation deps.androidx.recyclerview
    implementation deps.androidx.appcompat
    implementation deps.androidx.material
    implementation deps.androidx.constraintlayout
    implementation deps.androidx.lifecycle_viewmodel
    implementation deps.androidx.lifecycle_livedata
    implementation deps.androidx.lifecycle_runtime
    implementation deps.androidx.startup
    implementation deps.androidx.paging
    implementation deps.androidx.navigation_fragment
    implementation deps.androidx.navigation_ui

    // dagger/hilt
    implementation deps.libraries.hilt
    kapt deps.libraries.hilt_kapt
    // hilt with androidx
    implementation deps.androidx.hilt_lifecycle
    kapt deps.androidx.hilt_kapt

    // timber
    implementation deps.libraries.timber

    // glide
    implementation deps.libraries.glide
    kapt deps.libraries.glide_kapt

    // test
    testImplementation deps.test.junit
    testImplementation deps.test.mockk
    testImplementation deps.test.android_core
    testImplementation deps.libraries.moshi
    testImplementation deps.test.coroutine_test

    // android test
    androidTestImplementation deps.android_test.junit
    androidTestImplementation deps.android_test.espresso_core
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    def coverageSourceDirs = [
            "src/main/java"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]
    def excludePlatformCodes = [
            '**/io/viewpoint/moviedatabase/platform/**'
    ]
    def javaClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter + excludePlatformCodes
    )
    classDirectories.from(files([javaClasses]))
    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    executionData.from(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ]))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

jacoco {
    reportsDir = file("${buildDir}/reports")
}