plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.hilt.android)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlin.kapt)
}

apply from: '../external.gradle'
apply from: '../app.gradle'
apply from: '../android-configure.gradle'
apply from: '../android-test-dependencies.gradle'
apply from: '../android-jacoco.gradle'

android {
    namespace "io.viewpoint.moviedatabase"

    defaultConfig {
        applicationId "io.viewpoint.moviedatabase"
    }

    signingConfigs {
        releaseKeystore {
            Properties prop = new Properties()
            prop.load(project.rootProject.file('keystore.properties').newDataInputStream())
            storeFile project.rootProject.file('debug.keystore')
            storePassword prop.getProperty('storePassword')
            keyAlias prop.getProperty('keyAlias')
            keyPassword prop.getProperty('keyPassword')
        }
    }

    buildTypes {
        debug {
//            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            buildConfigField("String", "API_KEY", "\"${external.apiKey}\"")
            buildConfigField("int", "DATABASE_VERSION", "${app.database_version}")
        }
        release {
            buildConfigField("String", "API_KEY", "\"${external.apiKey}\"")
            buildConfigField("int", "DATABASE_VERSION", "${app.database_version}")

            signingConfig signingConfigs.releaseKeystore

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles fileTree(dir: 'proguard', include: ['*.pro']).asList().toArray()
        }
    }

    buildFeatures {
        dataBinding true
    }
}

kapt {
    correctErrorTypes true // for hilt
}

dependencies {
    implementation project(':resources')

    implementation project(':common')
    implementation project(':model')
    implementation project(':api')
    implementation project(':domain')
    implementation project(':common-ui')

    // features
    implementation project(':feature-home')
    implementation project(':feature-search')
    implementation project(':feature-setting')

    // androidx
    implementation libs.androidx.core
    implementation libs.androidx.activity
    implementation libs.androidx.fragment
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.appcompat
    implementation libs.androidx.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.lifecycle.livedata
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.startup
    implementation libs.androidx.paging
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.datastore.prefs
    implementation libs.androidx.workmanager
    implementation libs.androidx.hilt.work

    // androidx.room
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room
    kapt libs.androidx.room.compiler

    // dagger/hilt
    implementation libs.hilt
    kapt libs.hilt.kapt
    // hilt with androidx
    kapt libs.androidx.hilt.kapt

    // timber
    implementation libs.timber

    // glide
    implementation libs.glide
    kapt libs.glide.kapt

    // okhttp
    implementation libs.okhttp

    // flipper (don't use a external gradle file, because of build types)
    debugImplementation 'com.facebook.flipper:flipper:0.98.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'
    debugImplementation 'com.facebook.flipper:flipper-network-plugin:0.98.0'

    releaseImplementation 'com.facebook.flipper:flipper-noop:0.98.0'
}
